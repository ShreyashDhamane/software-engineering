language: python
python:
  - "3.11" # Use a stable Python version
dist: focal
os: linux

services:
  - postgresql

addons:
  postgresql: "13"
  apt:
    packages:
      - postgresql-13-postgis-3

env:
  global:
    - DJANGO_DATABASE_URL=postgres://postgres@localhost:5432/test_db
    - COVERALLS_PARALLEL=true
    - COVERALLS_SERVICE_NAME=travis-ci
  jobs:
    - TEST_SUITE=backend BASE_PATH="backend/nightwalkers" FRONTEND_PATH="frontend" COVERALLS_JOB_NAME="backend"
    - TEST_SUITE=frontend BASE_PATH="backend/nightwalkers" FRONTEND_PATH="frontend" COVERALLS_JOB_NAME="frontend"

before_install:
  - sudo apt-get update -qq
  - sudo apt-get install -y gdal-bin
  # Make sure PostgreSQL is running
  - sudo systemctl restart postgresql
  # Check PostgreSQL status
  - sudo systemctl status postgresql

cache:
  directories:
    - ~/.cache/pip
    - ~/.npm # Cache global npm packages
    - ~/.cache/npm # Cache npm cache
    - frontend/node_modules # Cache project dependencies
    - frontend/build
    - frontend/.next/cache
  npm: true # Add explicit npm caching
  pip: true # Add explicit pip caching

# Install dependencies
install:
  # Install GDAL via pip (ensure it matches the system-installed version)
  # - pip install GDAL==3.4.0 --no-cache-dir  # Specify a newer version of GDAL
  - pip install -r backend/nightwalkers/requirements.txt
  - pip install black flake8 coverage coveralls PyYAML

  # Install Node.js and frontend dependencies
  - nvm install 22.9 # Install Node.js 22 (or the version your Next.js app requires)
  - npm install -g npm@10.8 # Update npm to the latest version
  - cd $FRONTEND_PATH && npm install && cd .. # Install frontend dependencies

# Make the script executable
before_script:
  - chmod +x deploy.sh
  - chmod +x deploy-to-production.sh
  - chmod +x deploy-to-develop.sh
  - chmod +x deploy-to-netlify.sh
  - pg_isready
  # - psql -U postgres -c "DROP DATABASE IF EXISTS test_[secure];"  # For PostgreSQL
  - psql -U postgres -c "CREATE DATABASE test_db;"
  - sudo apt-get install -y postgresql-13-postgis-3
  - psql -U postgres -d test_db -c "CREATE EXTENSION postgis;"

# Run checks and tests
script:
  - |
    if [ "$TEST_SUITE" = "backend" ]; then
      black --check backend/nightwalkers/
      flake8 backend/nightwalkers/
      coverage run --source=$BASE_PATH $BASE_PATH/manage.py test $BASE_PATH --keepdb
      coverage report
      coverage xml
      COVERALLS_FLAG_NAME=backend COVERALLS_JOB_NAME=$COVERALLS_JOB_NAME COVERALLS_REPO_TOKEN=$COVERALLS_REPO_TOKEN coveralls --service=travis-pro --parallel < coverage.xml
    fi

  - |
    if [ "$TEST_SUITE" = "frontend" ]; then
      cd $FRONTEND_PATH
      npm run test -- --coverage --coverageReporters=lcov --coverageReporters=text
      ls -la coverage/
      COVERALLS_FLAG_NAME=frontend COVERALLS_JOB_NAME=$COVERALLS_JOB_NAME COVERALLS_REPO_TOKEN=$COVERALLS_REPO_TOKEN coveralls --service=travis-pro --parallel < coverage/lcov.info
    fi

# Deploy to Render and Netlify upon successful tests for the main and develop branches
deploy:
  provider: script
  script: ./deploy.sh
  cleanup: false
  on:
    all_branches: true
    condition: $TRAVIS_BRANCH =~ ^(main|develop)$
# Notifications (optional)
notifications:
  email:
    on_success: never
    on_failure: always

after_script:
  - |
    if [ "$TRAVIS_JOB_NUMBER" = "${TRAVIS_BUILD_NUMBER}.2" ]; then
      curl -k https://coveralls.io/webhook?repo_token=$COVERALLS_REPO_TOKEN -d "payload[build_num]=$TRAVIS_BUILD_NUMBER&payload[status]=done"
      COVERALLS_REPO_TOKEN=$COVERALLS_REPO_TOKEN coveralls --finish
    fi
